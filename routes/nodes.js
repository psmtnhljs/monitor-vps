const express = require('express');
const { db } = require('../config/database');
const { authenticateAPIKey } = require('../middleware/auth');
const { getLocationInfo } = require('../utils/location');

const router = express.Router();

// Ê≥®ÂÜåVPSËäÇÁÇπ - Â¢ûÂº∫ÁâàÊú¨ÔºåÁ°Æ‰øùËá™Âä®Ê£ÄÊµãÂú∞ÁêÜ‰ΩçÁΩÆ
router.post('/nodes/register', authenticateAPIKey, async (req, res) => {
    const { name, location, provider, ip_address } = req.body;
    
    if (!name || !ip_address) {
        return res.status(400).json({ error: 'ËäÇÁÇπÂêçÁß∞ÂíåIPÂú∞ÂùÄ‰∏çËÉΩ‰∏∫Á©∫' });
    }

    // Ëé∑ÂèñÂÆ¢Êà∑Á´ØÁúüÂÆûIP
    const clientIP = req.headers['x-forwarded-for']?.split(',')[0] || 
                     req.headers['x-real-ip'] || 
                     req.connection.remoteAddress || 
                     req.socket.remoteAddress ||
                     ip_address;

    const cleanIP = clientIP.replace(/^::ffff:/, '');
    
    console.log(`üìç ËäÇÁÇπÊ≥®ÂÜåËØ∑Ê±Ç: ${name} (ÂÆ¢Êà∑Á´ØIP: ${cleanIP})`);
    console.log(`ÂéüÂßã‰ΩçÁΩÆ‰ø°ÊÅØ: location=${location}, provider=${provider}`);

    // Ê£ÄÊü•ÊòØÂê¶‰∏∫Âç†‰ΩçÁ¨¶ËäÇÁÇπ
    db.get(
        'SELECT id, is_placeholder, location, provider FROM vps_nodes WHERE name = ?',
        [name],
        async (err, existingNode) => {
            if (err) {
                console.error('Ê£ÄÊü•ËäÇÁÇπÂ§±Ë¥•:', err);
                return res.status(500).json({ error: 'Ê≥®ÂÜåÂ§±Ë¥•' });
            }

            let finalLocation = location;
            let finalProvider = provider;
            let locationInfo = null;
            
            // ÂßãÁªàÂ∞ùËØïËé∑ÂèñÂú∞ÁêÜ‰ΩçÁΩÆ‰ø°ÊÅØÔºàÁî®‰∫éËá™Âä®Ê£ÄÊµãÊàñÊõ¥Êñ∞Áé∞Êúâ‰ø°ÊÅØÔºâ
            console.log('üîç ÂºÄÂßãËá™Âä®Ê£ÄÊµãÂú∞ÁêÜ‰ΩçÁΩÆÂíåISP‰ø°ÊÅØ...');
            locationInfo = await getLocationInfo(cleanIP);
            
            if (locationInfo) {
                console.log('‚úÖ Âú∞ÁêÜ‰ΩçÁΩÆÊ£ÄÊµãÊàêÂäü:', locationInfo);
                
                // Â¶ÇÊûú‰ΩçÁΩÆÊàñÊèê‰æõÂïÜÈúÄË¶ÅËá™Âä®Ê£ÄÊµãÔºåÂàô‰ΩøÁî®Ê£ÄÊµãÁªìÊûú
                if (location === 'Auto-detect' || !location) {
                    finalLocation = locationInfo.location_string;
                    console.log(`üìç Ëá™Âä®Ê£ÄÊµãÂà∞‰ΩçÁΩÆ: ${finalLocation}`);
                }
                
                if (provider === 'Auto-detect' || !provider) {
                    finalProvider = locationInfo.isp;
                    console.log(`üè¢ Ëá™Âä®Ê£ÄÊµãÂà∞ISP: ${finalProvider}`);
                }
            } else {
                console.log('‚ö†Ô∏è Âú∞ÁêÜ‰ΩçÁΩÆÊ£ÄÊµãÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§ÂÄº');
                if (location === 'Auto-detect' || !location) {
                    finalLocation = 'ÂæÖÊ£ÄÊµã';
                }
                if (provider === 'Auto-detect' || !provider) {
                    finalProvider = 'ÂæÖÊ£ÄÊµã';
                }
            }

            if (existingNode && existingNode.is_placeholder) {
                // Êõ¥Êñ∞Âç†‰ΩçÁ¨¶ËäÇÁÇπ‰∏∫ÁúüÂÆûËäÇÁÇπ
                console.log(`üîÑ ÊøÄÊ¥ªÁ©∫ÁôΩËäÇÁÇπ: ${name} (ID: ${existingNode.id})`);
                
                // Ê£ÄÊü•Êï∞ÊçÆÂ∫ìË°®ÊòØÂê¶ÊúâÊñ∞Â≠óÊÆµ
                db.all("PRAGMA table_info(vps_nodes)", (pragmaErr, columns) => {
                    if (pragmaErr) {
                        console.error('Ê£ÄÊü•Ë°®ÁªìÊûÑÂ§±Ë¥•:', pragmaErr);
                        return res.status(500).json({ error: 'Êï∞ÊçÆÂ∫ìÈîôËØØ' });
                    }
                    
                    const columnNames = columns.map(col => col.name);
                    const hasNewColumns = columnNames.includes('country_code');
                    
                    let updateSQL, updateParams;
                    
                    if (hasNewColumns && locationInfo) {
                        // Êñ∞ÁâàÊú¨Êï∞ÊçÆÂ∫ìÔºåÂåÖÂê´Âú∞ÁêÜ‰ΩçÁΩÆÂ≠óÊÆµ
                        updateSQL = `
                            UPDATE vps_nodes 
                            SET location = ?, provider = ?, ip_address = ?, 
                                last_seen = CURRENT_TIMESTAMP, status = 1, is_placeholder = 0,
                                country_code = ?, country_name = ?, city = ?, region = ?, isp = ?
                            WHERE id = ?
                        `;
                        updateParams = [
                            finalLocation, 
                            finalProvider, 
                            cleanIP,
                            locationInfo.country_code || null,
                            locationInfo.country || null,
                            locationInfo.city || null,
                            locationInfo.region || null,
                            locationInfo.isp || null,
                            existingNode.id
                        ];
                    } else {
                        // ÊóßÁâàÊú¨Êï∞ÊçÆÂ∫ìÊàñÊó†Âú∞ÁêÜ‰ΩçÁΩÆ‰ø°ÊÅØÔºåÂè™Êõ¥Êñ∞Âü∫Êú¨Â≠óÊÆµ
                        updateSQL = `
                            UPDATE vps_nodes 
                            SET location = ?, provider = ?, ip_address = ?, 
                                last_seen = CURRENT_TIMESTAMP, status = 1, is_placeholder = 0
                            WHERE id = ?
                        `;
                        updateParams = [finalLocation, finalProvider, cleanIP, existingNode.id];
                    }
                    
                    const updateStmt = db.prepare(updateSQL);
                    updateStmt.run(updateParams, function(err) {
                        if (err) {
                            console.error('Êõ¥Êñ∞Âç†‰ΩçÁ¨¶ËäÇÁÇπÂ§±Ë¥•:', err);
                            return res.status(500).json({ error: 'Êõ¥Êñ∞Â§±Ë¥•' });
                        }
                        
                        console.log(`‚úÖ Á©∫ÁôΩËäÇÁÇπÊøÄÊ¥ªÊàêÂäü: ${name} (${cleanIP})`);
                        console.log(`   ‰ΩçÁΩÆ: ${finalLocation}`);
                        console.log(`   Êèê‰æõÂïÜ: ${finalProvider}`);
                        if (locationInfo) {
                            console.log(`   Âú∞ÁêÜ‰ø°ÊÅØ: ${locationInfo.country} (${locationInfo.country_code})`);
                        }
                        
                        res.json({
                            success: true,
                            node_id: existingNode.id,
                            message: 'ËäÇÁÇπÊøÄÊ¥ªÊàêÂäü',
                            updated: true,
                            detected_ip: cleanIP,
                            location_info: {
                                location: finalLocation,
                                provider: finalProvider,
                                country_code: locationInfo?.country_code,
                                country: locationInfo?.country,
                                city: locationInfo?.city,
                                isp: locationInfo?.isp
                            }
                        });
                    });
                    updateStmt.finalize();
                });
            } else if (existingNode) {
                // Êõ¥Êñ∞Áé∞ÊúâÁúüÂÆûËäÇÁÇπÔºàÂåÖÊã¨Âú∞ÁêÜ‰ΩçÁΩÆ‰ø°ÊÅØÔºâ
                console.log(`üîÑ Êõ¥Êñ∞Áé∞ÊúâËäÇÁÇπ: ${name} (ID: ${existingNode.id})`);
                
                // Ê£ÄÊü•Êï∞ÊçÆÂ∫ìË°®ÊòØÂê¶ÊúâÊñ∞Â≠óÊÆµ
                db.all("PRAGMA table_info(vps_nodes)", (pragmaErr, columns) => {
                    if (pragmaErr) {
                        console.error('Ê£ÄÊü•Ë°®ÁªìÊûÑÂ§±Ë¥•:', pragmaErr);
                        return res.status(500).json({ error: 'Êï∞ÊçÆÂ∫ìÈîôËØØ' });
                    }
                    
                    const columnNames = columns.map(col => col.name);
                    const hasNewColumns = columnNames.includes('country_code');
                    
                    let updateSQL, updateParams;
                    
                    if (hasNewColumns && locationInfo) {
                        updateSQL = `
                            UPDATE vps_nodes 
                            SET location = ?, provider = ?, ip_address = ?, 
                                last_seen = CURRENT_TIMESTAMP, status = 1,
                                country_code = ?, country_name = ?, city = ?, region = ?, isp = ?
                            WHERE id = ?
                        `;
                        updateParams = [
                            finalLocation, 
                            finalProvider, 
                            cleanIP,
                            locationInfo.country_code || null,
                            locationInfo.country || null,
                            locationInfo.city || null,
                            locationInfo.region || null,
                            locationInfo.isp || null,
                            existingNode.id
                        ];
                    } else {
                        updateSQL = `
                            UPDATE vps_nodes 
                            SET location = ?, provider = ?, ip_address = ?, 
                                last_seen = CURRENT_TIMESTAMP, status = 1
                            WHERE id = ?
                        `;
                        updateParams = [finalLocation, finalProvider, cleanIP, existingNode.id];
                    }
                    
                    const updateStmt = db.prepare(updateSQL);
                    updateStmt.run(updateParams, function(err) {
                        if (err) {
                            console.error('Êõ¥Êñ∞ËäÇÁÇπÂ§±Ë¥•:', err);
                            return res.status(500).json({ error: 'Êõ¥Êñ∞Â§±Ë¥•' });
                        }
                        
                        console.log(`‚úÖ ËäÇÁÇπ‰ø°ÊÅØÊõ¥Êñ∞ÊàêÂäü: ${name} (${cleanIP})`);
                        if (locationInfo) {
                            console.log(`   Âú∞ÁêÜ‰ø°ÊÅØ: ${locationInfo.country} (${locationInfo.country_code})`);
                        }
                        
                        res.json({
                            success: true,
                            node_id: existingNode.id,
                            message: 'ËäÇÁÇπ‰ø°ÊÅØÂ∑≤Êõ¥Êñ∞',
                            updated: true,
                            detected_ip: cleanIP,
                            location_info: {
                                location: finalLocation,
                                provider: finalProvider,
                                country_code: locationInfo?.country_code,
                                country: locationInfo?.country,
                                city: locationInfo?.city,
                                isp: locationInfo?.isp
                            }
                        });
                    });
                    updateStmt.finalize();
                });
            } else {
                // ÂàõÂª∫Êñ∞ËäÇÁÇπ
                console.log(`üÜï ÂàõÂª∫Êñ∞ËäÇÁÇπ: ${name}`);
                
                // Ê£ÄÊü•Êï∞ÊçÆÂ∫ìË°®ÊòØÂê¶ÊúâÊñ∞Â≠óÊÆµ
                db.all("PRAGMA table_info(vps_nodes)", (pragmaErr, columns) => {
                    if (pragmaErr) {
                        console.error('Ê£ÄÊü•Ë°®ÁªìÊûÑÂ§±Ë¥•:', pragmaErr);
                        return res.status(500).json({ error: 'Êï∞ÊçÆÂ∫ìÈîôËØØ' });
                    }
                    
                    const columnNames = columns.map(col => col.name);
                    const hasNewColumns = columnNames.includes('country_code');
                    
                    let insertSQL, insertParams;
                    
                    if (hasNewColumns && locationInfo) {
                        insertSQL = `
                            INSERT INTO vps_nodes 
                            (name, location, provider, ip_address, last_seen, status, is_placeholder,
                             country_code, country_name, city, region, isp)
                            VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, 1, 0, ?, ?, ?, ?, ?)
                        `;
                        insertParams = [
                            name, 
                            finalLocation, 
                            finalProvider, 
                            cleanIP,
                            locationInfo.country_code || null,
                            locationInfo.country || null,
                            locationInfo.city || null,
                            locationInfo.region || null,
                            locationInfo.isp || null
                        ];
                    } else {
                        insertSQL = `
                            INSERT INTO vps_nodes (name, location, provider, ip_address, last_seen, status, is_placeholder)
                            VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, 1, 0)
                        `;
                        insertParams = [name, finalLocation, finalProvider, cleanIP];
                    }
                    
                    const stmt = db.prepare(insertSQL);
                    stmt.run(insertParams, function(err) {
                        if (err) {
                            console.error('ËäÇÁÇπÊ≥®ÂÜåÂ§±Ë¥•:', err);
                            return res.status(500).json({ error: 'Ê≥®ÂÜåÂ§±Ë¥•' });
                        }
                        
                        console.log(`‚úÖ Êñ∞ËäÇÁÇπÊ≥®ÂÜåÊàêÂäü: ${name} (${cleanIP})`);
                        if (locationInfo) {
                            console.log(`   Âú∞ÁêÜ‰ø°ÊÅØ: ${locationInfo.country} (${locationInfo.country_code})`);
                        }
                        
                        res.json({
                            success: true,
                            node_id: this.lastID,
                            message: 'ËäÇÁÇπÊ≥®ÂÜåÊàêÂäü',
                            detected_ip: cleanIP,
                            location_info: {
                                location: finalLocation,
                                provider: finalProvider,
                                country_code: locationInfo?.country_code,
                                country: locationInfo?.country,
                                city: locationInfo?.city,
                                isp: locationInfo?.isp
                            }
                        });
                    });
                    stmt.finalize();
                });
            }
        }
    );
});

// Êé•Êî∂ÊµãËØïÁªìÊûú
router.post('/test-results', authenticateAPIKey, (req, res) => {
    const { node_id, results, timestamp } = req.body;
    
    if (!node_id || !results || !Array.isArray(results)) {
        return res.status(400).json({ error: 'Êó†ÊïàÁöÑÊï∞ÊçÆÊ†ºÂºè' });
    }

    // Êõ¥Êñ∞ËäÇÁÇπÊúÄÂêéÂú®Á∫øÊó∂Èó¥
    db.run('UPDATE vps_nodes SET last_seen = CURRENT_TIMESTAMP WHERE id = ?', [node_id]);

    const stmt = db.prepare(`
        INSERT INTO test_results 
        (node_id, isp_name, target_ip, test_type, avg_latency, packet_loss, jitter, test_time, raw_data)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);

    let insertCount = 0;
    const testTime = timestamp ? new Date(timestamp).toISOString() : new Date().toISOString();

    results.forEach(result => {
        stmt.run([
            node_id,
            result.isp_name,
            result.target_ip,
            result.test_type,
            result.avg_latency || null,
            result.packet_loss || null,
            result.jitter || null,
            testTime,
            JSON.stringify(result.raw_data || {})
        ], (err) => {
            if (!err) insertCount++;
        });
    });

    stmt.finalize((err) => {
        if (err) {
            console.error('‰øùÂ≠òÊµãËØïÁªìÊûúÂ§±Ë¥•:', err);
            return res.status(500).json({ error: '‰øùÂ≠òÂ§±Ë¥•' });
        }
        
        res.json({
            success: true,
            inserted: insertCount,
            message: 'ÊµãËØïÁªìÊûú‰øùÂ≠òÊàêÂäü'
        });
    });
});

// Ëé∑ÂèñÊâÄÊúâVPSËäÇÁÇπÁä∂ÊÄÅÔºàÂÖ¨ÂÖ±Êé•Âè£ÔºåÊ†πÊçÆËÆæÁΩÆÂÜ≥ÂÆöÊòØÂê¶ÊòæÁ§∫IPÔºâ
router.get('/nodes', (req, res) => {
    // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊòæÁ§∫IPÂú∞ÂùÄ
    db.get('SELECT config_value FROM system_config WHERE config_key = ?', ['show_ip_to_public'], (err, config) => {
        const showIP = config?.config_value === 'true';
        
        const ipField = showIP ? 'ip_address' : 'NULL as ip_address';
        
        // ÂÖàÊ£ÄÊü•Ë°®ÁªìÊûÑ
        db.all("PRAGMA table_info(vps_nodes)", (pragmaErr, columns) => {
            if (pragmaErr) {
                console.error('Ê£ÄÊü•Ë°®ÁªìÊûÑÂ§±Ë¥•:', pragmaErr);
                return res.status(500).json({ error: 'Êï∞ÊçÆÂ∫ìÈîôËØØ' });
            }
            
            const columnNames = columns.map(col => col.name);
            const hasNewColumns = columnNames.includes('country_code');
            
            let selectSQL;
            if (hasNewColumns) {
                selectSQL = `
                    SELECT 
                        id, name, location, provider, ${ipField}, status,
                        last_seen, country_code, country_name, city, region, isp,
                        datetime(last_seen, 'localtime') as last_seen_local,
                        CASE 
                            WHEN is_placeholder = 1 THEN 'placeholder'
                            WHEN datetime(last_seen) > datetime('now', '-6 minutes') THEN 'online'
                            WHEN datetime(last_seen) > datetime('now', '-15 minutes') THEN 'warning'
                            ELSE 'offline'
                        END as connection_status,
                        ROUND((julianday('now') - julianday(last_seen)) * 24 * 60, 1) as minutes_since_last_seen
                    FROM vps_nodes 
                    WHERE is_placeholder = 0
                    ORDER BY connection_status ASC, location, name
                `;
            } else {
                selectSQL = `
                    SELECT 
                        id, name, location, provider, ${ipField}, status,
                        last_seen,
                        datetime(last_seen, 'localtime') as last_seen_local,
                        CASE 
                            WHEN is_placeholder = 1 THEN 'placeholder'
                            WHEN datetime(last_seen) > datetime('now', '-6 minutes') THEN 'online'
                            WHEN datetime(last_seen) > datetime('now', '-15 minutes') THEN 'warning'
                            ELSE 'offline'
                        END as connection_status,
                        ROUND((julianday('now') - julianday(last_seen)) * 24 * 60, 1) as minutes_since_last_seen
                    FROM vps_nodes 
                    WHERE is_placeholder = 0
                    ORDER BY connection_status ASC, location, name
                `;
            }
            
            db.all(selectSQL, (err, rows) => {
                if (err) {
                    console.error('Ëé∑ÂèñËäÇÁÇπÂàóË°®Â§±Ë¥•:', err);
                    return res.status(500).json({ error: 'Êü•ËØ¢Â§±Ë¥•' });
                }
                
                // Ëá™Âä®Ê†áËÆ∞ÈïøÊó∂Èó¥Á¶ªÁ∫øÁöÑËäÇÁÇπ‰∏∫offlineÁä∂ÊÄÅ
                const offlineNodeIds = rows
                    .filter(row => row.minutes_since_last_seen > 15)
                    .map(row => row.id);
                
                if (offlineNodeIds.length > 0) {
                    db.run(`
                        UPDATE vps_nodes 
                        SET status = 0 
                        WHERE id IN (${offlineNodeIds.join(',')})
                    `, (updateErr) => {
                        if (updateErr) {
                            console.error('Êõ¥Êñ∞Á¶ªÁ∫øÁä∂ÊÄÅÂ§±Ë¥•:', updateErr);
                        }
                    });
                }
                
                res.json(rows);
            });
        });
    });
});

// Ëé∑ÂèñÁâπÂÆöËäÇÁÇπÁöÑÊúÄÊñ∞ÊµãËØïÁªìÊûú
router.get('/nodes/:nodeId/latest', (req, res) => {
    const { nodeId } = req.params;
    
    db.all(`
        SELECT 
            isp_name,
            test_type,
            AVG(avg_latency) as avg_latency,
            AVG(packet_loss) as packet_loss,
            COUNT(*) as test_count,
            MAX(test_time) as last_test
        FROM test_results 
        WHERE node_id = ? 
            AND test_time > datetime('now', '-1 hour')
            AND test_type = 'ping'
        GROUP BY isp_name
        ORDER BY isp_name
    `, [nodeId], (err, rows) => {
        if (err) {
            console.error('Ëé∑ÂèñÊúÄÊñ∞ÁªìÊûúÂ§±Ë¥•:', err);
            return res.status(500).json({ error: 'Êü•ËØ¢Â§±Ë¥•' });
        }
        
        res.json(rows);
    });
});

// Ëé∑ÂèñÂõæË°®Êï∞ÊçÆ
// Ëé∑ÂèñÂõæË°®Êï∞ÊçÆ - ‰øÆÂ§çÊó∂Âå∫ÈóÆÈ¢ò
router.get('/chart-data/:nodeId/:ispName', (req, res) => {
    const { nodeId, ispName } = req.params;
    const { timeRange = '24h' } = req.query;
    
    // ‰ΩøÁî®UTCÊó∂Èó¥ËÆ°ÁÆóÊó∂Èó¥ËåÉÂõ¥
    const now = new Date();
    let hoursBack;
    
    switch(timeRange) {
        case '1h':
            hoursBack = 1;
            break;
        case '6h':
            hoursBack = 6;
            break;
        case '24h':
            hoursBack = 24;
            break;
        case '7d':
            hoursBack = 24 * 7;
            break;
        default:
            hoursBack = 24;
    }
    
    // ËÆ°ÁÆóËµ∑ÂßãÊó∂Èó¥ÔºàUTCÔºâ
    const startTimeUTC = new Date(now.getTime() - hoursBack * 60 * 60 * 1000).toISOString();
    const nowUTC = now.toISOString();
    
    console.log(`üìä Êü•ËØ¢ÂõæË°®Êï∞ÊçÆ: ËäÇÁÇπ${nodeId}, ISP:${ispName}, Êó∂Èó¥ËåÉÂõ¥:${timeRange}`);
    console.log(`   Ëµ∑ÂßãUTCÊó∂Èó¥: ${startTimeUTC}`);
    console.log(`   ÂΩìÂâçUTCÊó∂Èó¥: ${nowUTC}`);
    console.log(`   Êü•ËØ¢${hoursBack}Â∞èÊó∂ÂÜÖÁöÑÊï∞ÊçÆ`);

    db.all(`
        SELECT 
            test_time,
            avg_latency,
            packet_loss,
            target_ip
        FROM test_results 
        WHERE node_id = ? 
            AND isp_name = ?
            AND test_type = 'ping'
            AND test_time >= ?
        ORDER BY test_time ASC
    `, [nodeId, ispName, startTimeUTC], (err, rows) => {
        if (err) {
            console.error('Ëé∑ÂèñÂõæË°®Êï∞ÊçÆÂ§±Ë¥•:', err);
            return res.status(500).json({ error: 'Êü•ËØ¢Â§±Ë¥•' });
        }
        
        console.log(`   Êü•ËØ¢ÁªìÊûú: ÊâæÂà∞ ${rows.length} Êù°Êï∞ÊçÆËÆ∞ÂΩï`);
        if (rows.length > 0) {
            console.log(`   ÊúÄÊó©ËÆ∞ÂΩï: ${rows[0].test_time}`);
            console.log(`   ÊúÄÊôöËÆ∞ÂΩï: ${rows[rows.length - 1].test_time}`);
        }
        
        // Ê†ºÂºèÂåñÊï∞ÊçÆ
        const chartData = {
            ping: [],
            labels: []
        };
        
        const timeLabels = new Set();
        
        rows.forEach(row => {
            const time = new Date(row.test_time);
            const timeLabel = time.toLocaleTimeString('zh-CN', { 
                hour: '2-digit', 
                minute: '2-digit',
                timeZone: 'UTC'  // Áªü‰∏Ä‰ΩøÁî®UTCÊó∂Èó¥ÊòæÁ§∫ÔºåÈÅøÂÖçÊó∂Âå∫Ê∑∑‰π±
            });
            
            timeLabels.add(timeLabel);
            
            chartData.ping.push({
                x: timeLabel,
                y: row.avg_latency,
                packetLoss: row.packet_loss,
                time: row.test_time
            });
        });
        
        chartData.labels = Array.from(timeLabels).sort();
        
        console.log(`   ËøîÂõû ${chartData.ping.length} ‰∏™Êï∞ÊçÆÁÇπÔºå${chartData.labels.length} ‰∏™Êó∂Èó¥Ê†áÁ≠æ`);
        
        res.json(chartData);
    });
});

// ÂøÉË∑≥Ê£ÄÊµãÁ´ØÁÇπ
router.post('/nodes/:nodeId/heartbeat', authenticateAPIKey, (req, res) => {
    const { nodeId } = req.params;
    
    db.run(`
        UPDATE vps_nodes 
        SET last_seen = CURRENT_TIMESTAMP, status = 1 
        WHERE id = ?
    `, [nodeId], function(err) {
        if (err) {
            console.error('ÂøÉË∑≥Êõ¥Êñ∞Â§±Ë¥•:', err);
            return res.status(500).json({ error: 'ÂøÉË∑≥Êõ¥Êñ∞Â§±Ë¥•' });
        }
        
        if (this.changes === 0) {
            return res.status(404).json({ error: 'ËäÇÁÇπ‰∏çÂ≠òÂú®' });
        }
        
        res.json({
            success: true,
            timestamp: new Date().toISOString(),
            nodeId: nodeId
        });
    });
});

// ËäÇÁÇπÁä∂ÊÄÅÊõ¥Êñ∞Á´ØÁÇπÔºàÁî®‰∫éÂÆ¢Êà∑Á´Ø‰∏ãÁ∫øÈÄöÁü•Ôºâ
router.post('/nodes/:nodeId/status', authenticateAPIKey, (req, res) => {
    const { nodeId } = req.params;
    const { status } = req.body;
    
    console.log(`üì° ËäÇÁÇπ ${nodeId} Áä∂ÊÄÅÊõ¥Êñ∞: ${status}`);
    
    let statusValue = 1; // ÈªòËÆ§Âú®Á∫ø
    if (status === 'offline') {
        statusValue = 0;
    }
    
    db.run(`
        UPDATE vps_nodes 
        SET status = ?, last_seen = CURRENT_TIMESTAMP 
        WHERE id = ?
    `, [statusValue, nodeId], function(err) {
        if (err) {
            console.error('Áä∂ÊÄÅÊõ¥Êñ∞Â§±Ë¥•:', err);
            return res.status(500).json({ error: 'Áä∂ÊÄÅÊõ¥Êñ∞Â§±Ë¥•' });
        }
        
        if (this.changes === 0) {
            return res.status(404).json({ error: 'ËäÇÁÇπ‰∏çÂ≠òÂú®' });
        }
        
        console.log(`‚úÖ ËäÇÁÇπ ${nodeId} Áä∂ÊÄÅÊõ¥Êñ∞‰∏∫: ${status}`);
        
        res.json({
            success: true,
            message: 'Áä∂ÊÄÅÊõ¥Êñ∞ÊàêÂäü',
            nodeId: nodeId,
            status: status
        });
    });
});

module.exports = router;